import Entity from "../../entity/entity";
import Schema from "../schema";
import SeparableFieldDefinition from "../definition/separable-field-definition";
import SortableFieldDefinition from "../definition/sortable-field-definition";
export default abstract class SchemaBuilder<TEntity extends Entity> {
    protected schema: Schema<TEntity>;
    constructor(schema: Schema<TEntity>);
    get redisSchema(): Array<string>;
    protected abstract buildEntry(field: string): Array<string>;
    protected buildSortableNumeric(fieldDef: SortableFieldDefinition): Array<string>;
    protected buildTag(): Array<string>;
    protected buildSeparableTag(fieldDef: SeparableFieldDefinition): Array<string>;
    protected buildSortableTag(fieldDef: SortableFieldDefinition): Array<string>;
    protected buildSeparableAndSortableTag(fieldDef: SeparableFieldDefinition & SortableFieldDefinition): Array<string>;
    protected buildSortableText(fieldDef: SortableFieldDefinition): Array<string>;
    protected buildGeo(): Array<string>;
    private buildField;
    private buildSeparableField;
    private buildSortableField;
    private buildSeparableAndSortableField;
}
