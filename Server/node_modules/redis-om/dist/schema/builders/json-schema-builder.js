"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const schema_builder_1 = (0, tslib_1.__importDefault)(require("./schema-builder"));
const logger = (0, tslib_1.__importStar)(require("../../shims/logger"));
class JsonSchemaBuilder extends schema_builder_1.default {
    buildEntry(field) {
        const fieldDef = this.schema.definition[field];
        const fieldType = fieldDef.type;
        const fieldAlias = fieldDef.alias ?? field;
        const fieldPath = `\$.${fieldAlias}${fieldType === 'string[]' ? '[*]' : ''}`;
        let fieldDetails;
        switch (fieldType) {
            case 'date':
                fieldDetails = this.buildSortableNumeric(fieldDef);
                break;
            case 'boolean':
                if (fieldDef.sortable)
                    logger.warn(`You have marked the boolean field '${field}' as sortable but RediSearch doesn't support the SORTABLE argument on a TAG for JSON. Ignored.`);
                fieldDetails = this.buildTag();
                break;
            case 'number':
                fieldDetails = this.buildSortableNumeric(fieldDef);
                break;
            case 'point':
                fieldDetails = this.buildGeo();
                break;
            case 'string[]':
                fieldDetails = this.buildTag();
                break;
            case 'string':
                if (fieldDef.sortable)
                    logger.warn(`You have marked the string field '${field}' as sortable but RediSearch doesn't support the SORTABLE argument on a TAG for JSON. Ignored.`);
                fieldDetails = this.buildSeparableTag(fieldDef);
                break;
            case 'text':
                fieldDetails = this.buildSortableText(fieldDef);
                break;
        }
        return [fieldPath, 'AS', fieldAlias, ...fieldDetails];
    }
}
exports.default = JsonSchemaBuilder;
